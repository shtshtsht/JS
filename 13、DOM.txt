DOM

宿主对象，由浏览器提供的对象

Document Object Module
文档对象模型

DOM就是用JS操作网页元素的

文档：整个HTML网页文档
对象：将网页中的每一个元素都转为一个对象。p标签变成一个对象，一段文字变成一个对象，所有东西都变成对应的对象。
模型：使用模型表示对象之间的关系，方便获取对象。

HTML DOM 树

****************************************************
节点Node

1、文档节点
整个HTML文档，即整个网页
nodeName：#document
nodeType：9
nodeValue：null

2、元素节点
HTML中的标签
nodeName：标签名
nodeType：1
nodeValue：null

3、属性节点
标签的属性
nodeName：属性名
nodeType：2
nodeValue：属性值

4、文本节点
文本
nodeName：#text
nodeType：3
nodeValue：文本内容

****************************************************
文档节点对象document，由浏览器提供，是window的一个属性。

1、找元素
例：获取id为btn的元素
var myBtn = document.getElementById("btn")；

2、改属性
例：改btn内部的HTML代码，对于按钮就是修改文字显示
myBtn.innerHTML = “新文字”；

***************************************************
事件
就是文档或者浏览器窗口中发生的一些特定的交互瞬间，如点击按钮、拖动浏览器、在页面内移动鼠标光标等。就是用户和浏览器的交互行为。

JavaScript与HTML之间的交互是通过事件实现的。
例：给按钮的对应事件绑定处理函数，实现响应事件。
btn.onclick = function(){}；这样就给按钮的onclick事件绑定了一个回调函数，这个函数就叫响应函数。当事件被触发，这个函数执行。

******************************************************
onload

浏览器加载页面时，HTML自上而下执行。
如果把JS代码写在页面上部，代码执行时，页面还没有加载。
onload事件会在页面加载完成之后触发
给window的onload事件绑定一个响应函数。就能保证在页面加载完成之后才执行响应函数中的内容。
window.onload = function(){ 
	var btn = document.getElementById("btn");
	btn.onclick = function(){
		btn.innerHTML = "new name";
	};
}；
这样就可以确保head标签中的script中的JS代码在页面加载完成之后执行。在代码执行时，所有DOM对象已经加载完毕了，DOM对象就可以被操作了。

代码写在body中的对应标签后面，性能有优势，而且好找好修改。

************************************************
查询节点
通过 document对象 调用
在整个页面中查询

1、getElementById()
通过（id）获取（一个）元素节点兑现

2、geElementsByTagName()
通过（标签名）获取（一组）元素节点对象
返回一个类似数组的对象。

3、getElementsByName()
通过（name）属性获取（一组）元素节点对象
返回一个类似数组的对象。


innerHTML用于获取元素（内部）的HTML代码
自结束标签没有这个属性。

读取属性时，元素.属性名  即可
class是特例，要用className代替

*****************************************************
查询节点
通过 具体元素对象 调用
在指定元素的后代中查询

1、getElementsByTagName()
返回当前节点的指定标签名的后代节点
返回的是一个类似数组的对象。

2、childNodes
当前节点的所有子节点
所有，指的是包括text在内的所有节点，空格、换行都是text节点！！！
注意：ie8及以下浏览器中，空白不会被当作text节点。

3、firstChild
当前节点的第一个子节点
包括空白文本节点

4、lastchild
当前节点的最后一个子节点
包括空白文本节点

5、children
获取当前元素的子（元素），和节点有区别。
不会包括空白文本节点。
所有浏览器都兼容

6、firstElementChild、lastElementChild
获取当前元素的首、尾子元素，不包括空白文本
ie9以上兼容

7、parentNode
获取父节点

8、previousSibling
前一个兄弟节点
包括空白文本节点

9、nextSibling
后一个兄弟节点
包括空白文本节点

10、previousElementSibling、nextElementSibling
前/后一个兄弟元素，不包括空白文本
ie8及以下不支持

*******************************************************
innerText
该属性获取元素内部的文本内容
和innerHTML类似，但是会自动将HTML的标签符号去除
innerHTML返回的是HTML文本，含有各种标签符号

****************************************************
ducument其他属性

body属性
document.body

html根标签
document.documentElement

all 页面中的所有元素
document.all

getElementsByTagName("*")也是查找所有元素

**********************************************
根据元素的class属性值查询一组元素节点对象，也是兼容性问题。
getElementsByClassName();

**************************************************
选择器
ie8 可用！ 可用！ 可用！

document.querySelector(字符串);
参数字符串是CSS选择器 如 ".box div"
只返回一个满足条件的元素。当满足条件的元素有多个，则只会返回查到的第一个。

document.querySelectorAll()
返回所有满足条件的元素，是个类似数组的对象。

*******************************************************
增、删、改

1、appendChild（）
给指定的父节点添加子节点
父节点 . appendChild（子节点）

2、removeChild()
删除子节点。
父节点 . removeChild(子节点)
常用方法：子节点 . parentNode . remoaveChild(子节点)

3、replaceChild()
替换子节点。
父节点 . replaceChild(新节点，旧节点)

4、insertBefore()
在指定的子节点前面插入新的子节点。
注意：父节点调用
父节点 . insertBefore(放入的节点，目标节点)

5、createElement(“标签名”)
创建元素节点。
document调用

6、createTextNode(“文本内容”)
创建文本节点。
document调用

********************************************************
使用innerHTML添加元素
父元素.innerHTML += "要添加的HTML标签语句"；
但是如果原始状态子元素已经绑定事件，这种用法会刷新元素，绑定的事件就失效了。


